/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_TRANSACTION_PB_H_INCLUDED
#define PB_TRANSACTION_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Transaction { 
    /* The serialized version of the TransactionHeader */
    pb_callback_t header; 
    /* The signature derived from signing the header */
    pb_callback_t header_signature; 
    /* The payload is the encoded family specific information of the
 transaction. Example cbor({'Verb': verb, 'Name': name,'Value': value}) */
    pb_callback_t payload; 
} Transaction;

typedef struct _TransactionHeader { 
    /* Public key for the client who added this transaction to a batch */
    pb_callback_t batcher_public_key; 
    /* A list of transaction signatures that describe the transactions that
 must be processed before this transaction can be valid */
    pb_callback_t dependencies; 
    /* The family name correlates to the transaction processor's family name
 that this transaction can be processed on, for example 'intkey' */
    pb_callback_t family_name; 
    /* The family version correlates to the transaction processor's family
 version that this transaction can be processed on, for example "1.0" */
    pb_callback_t family_version; 
    /* A list of addresses that are given to the context manager and control
 what addresses the transaction processor is allowed to read from. */
    pb_callback_t inputs; 
    /* A random string that provides uniqueness for transactions with
 otherwise identical fields. */
    pb_callback_t nonce; 
    /* A list of addresses that are given to the context manager and control
 what addresses the transaction processor is allowed to write to. */
    pb_callback_t outputs; 
    /* The sha512 hash of the encoded payload */
    pb_callback_t payload_sha512; 
    /* Public key for the client that signed the TransactionHeader */
    pb_callback_t signer_public_key; 
} TransactionHeader;

/* A simple list of transactions that needs to be serialized before
 it can be transmitted to a batcher. */
typedef struct _TransactionList { 
    pb_callback_t transactions; 
} TransactionList;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define TransactionHeader_init_default           {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Transaction_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define TransactionList_init_default             {{{NULL}, NULL}}
#define TransactionHeader_init_zero              {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define Transaction_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define TransactionList_init_zero                {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Transaction_header_tag                   1
#define Transaction_header_signature_tag         2
#define Transaction_payload_tag                  3
#define TransactionHeader_batcher_public_key_tag 1
#define TransactionHeader_dependencies_tag       2
#define TransactionHeader_family_name_tag        3
#define TransactionHeader_family_version_tag     4
#define TransactionHeader_inputs_tag             5
#define TransactionHeader_nonce_tag              6
#define TransactionHeader_outputs_tag            7
#define TransactionHeader_payload_sha512_tag     9
#define TransactionHeader_signer_public_key_tag  10
#define TransactionList_transactions_tag         1

/* Struct field encoding specification for nanopb */
#define TransactionHeader_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   batcher_public_key,   1) \
X(a, CALLBACK, REPEATED, STRING,   dependencies,      2) \
X(a, CALLBACK, SINGULAR, STRING,   family_name,       3) \
X(a, CALLBACK, SINGULAR, STRING,   family_version,    4) \
X(a, CALLBACK, REPEATED, STRING,   inputs,            5) \
X(a, CALLBACK, SINGULAR, STRING,   nonce,             6) \
X(a, CALLBACK, REPEATED, STRING,   outputs,           7) \
X(a, CALLBACK, SINGULAR, STRING,   payload_sha512,    9) \
X(a, CALLBACK, SINGULAR, STRING,   signer_public_key,  10)
#define TransactionHeader_CALLBACK pb_default_field_callback
#define TransactionHeader_DEFAULT NULL

#define Transaction_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    header,            1) \
X(a, CALLBACK, SINGULAR, STRING,   header_signature,   2) \
X(a, CALLBACK, SINGULAR, BYTES,    payload,           3)
#define Transaction_CALLBACK pb_default_field_callback
#define Transaction_DEFAULT NULL

#define TransactionList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  transactions,      1)
#define TransactionList_CALLBACK pb_default_field_callback
#define TransactionList_DEFAULT NULL
#define TransactionList_transactions_MSGTYPE Transaction

extern const pb_msgdesc_t TransactionHeader_msg;
extern const pb_msgdesc_t Transaction_msg;
extern const pb_msgdesc_t TransactionList_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TransactionHeader_fields &TransactionHeader_msg
#define Transaction_fields &Transaction_msg
#define TransactionList_fields &TransactionList_msg

/* Maximum encoded size of messages (where known) */
/* TransactionHeader_size depends on runtime parameters */
/* Transaction_size depends on runtime parameters */
/* TransactionList_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
