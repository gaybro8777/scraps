/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_BATCH_PB_H_INCLUDED
#define PB_BATCH_PB_H_INCLUDED
#include "pb.h"
#include "transaction.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _BatchHeader { 
    /* Public key for the client that signed the BatchHeader */
    pb_callback_t signer_public_key; 
    /* List of transaction.header_signatures that match the order of
 transactions required for the batch */
    pb_callback_t transaction_ids; 
} BatchHeader;

typedef struct _BatchList { 
    pb_callback_t batches; 
} BatchList;

typedef struct _Batch { 
    /* The serialized version of the BatchHeader */
    pb_callback_t header; 
    /* The signature derived from signing the header */
    pb_callback_t header_signature; 
    /* A list of the transactions that match the list of
 transaction_ids listed in the batch header */
    pb_callback_t transactions; 
    /* A debugging flag which indicates this batch should be traced through the
 system, resulting in a higher level of debugging output. */
    bool trace; 
} Batch;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define BatchHeader_init_default                 {{{NULL}, NULL}, {{NULL}, NULL}}
#define Batch_init_default                       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define BatchList_init_default                   {{{NULL}, NULL}}
#define BatchHeader_init_zero                    {{{NULL}, NULL}, {{NULL}, NULL}}
#define Batch_init_zero                          {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0}
#define BatchList_init_zero                      {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define BatchHeader_signer_public_key_tag        1
#define BatchHeader_transaction_ids_tag          2
#define BatchList_batches_tag                    1
#define Batch_header_tag                         1
#define Batch_header_signature_tag               2
#define Batch_transactions_tag                   3
#define Batch_trace_tag                          4

/* Struct field encoding specification for nanopb */
#define BatchHeader_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   signer_public_key,   1) \
X(a, CALLBACK, REPEATED, STRING,   transaction_ids,   2)
#define BatchHeader_CALLBACK pb_default_field_callback
#define BatchHeader_DEFAULT NULL

#define Batch_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    header,            1) \
X(a, CALLBACK, SINGULAR, STRING,   header_signature,   2) \
X(a, CALLBACK, REPEATED, MESSAGE,  transactions,      3) \
X(a, STATIC,   SINGULAR, BOOL,     trace,             4)
#define Batch_CALLBACK pb_default_field_callback
#define Batch_DEFAULT NULL
#define Batch_transactions_MSGTYPE Transaction

#define BatchList_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  batches,           1)
#define BatchList_CALLBACK pb_default_field_callback
#define BatchList_DEFAULT NULL
#define BatchList_batches_MSGTYPE Batch

extern const pb_msgdesc_t BatchHeader_msg;
extern const pb_msgdesc_t Batch_msg;
extern const pb_msgdesc_t BatchList_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BatchHeader_fields &BatchHeader_msg
#define Batch_fields &Batch_msg
#define BatchList_fields &BatchList_msg

/* Maximum encoded size of messages (where known) */
/* BatchHeader_size depends on runtime parameters */
/* Batch_size depends on runtime parameters */
/* BatchList_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
