/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_TRUST_QUERY_PB_H_INCLUDED
#define PB_TRUST_QUERY_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _TrustQuery { 
    pb_callback_t Trustor; 
    pb_callback_t Trustee; 
    float MinReliability; 
} TrustQuery;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define TrustQuery_init_default                  {{{NULL}, NULL}, {{NULL}, NULL}, 0}
#define TrustQuery_init_zero                     {{{NULL}, NULL}, {{NULL}, NULL}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define TrustQuery_Trustor_tag                   1
#define TrustQuery_Trustee_tag                   2
#define TrustQuery_MinReliability_tag            3

/* Struct field encoding specification for nanopb */
#define TrustQuery_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   Trustor,           1) \
X(a, CALLBACK, SINGULAR, STRING,   Trustee,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    MinReliability,    3)
#define TrustQuery_CALLBACK pb_default_field_callback
#define TrustQuery_DEFAULT NULL

extern const pb_msgdesc_t TrustQuery_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TrustQuery_fields &TrustQuery_msg

/* Maximum encoded size of messages (where known) */
/* TrustQuery_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
